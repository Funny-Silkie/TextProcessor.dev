@using System.Collections;
@using TextProcessor.Logics.Operations;
@using TextProcessor.Logics.Operations.Conditions;

@inject ArgumentEditViewModel ViewModel

<div>
    @{
        @if (Argument.Type.HasFlag(ArgumentType.Array))
        {
            if (!string.IsNullOrEmpty(Argument.Name))
            {
                <div>
                    <RadzenLabel Text="@(Argument.Name)" />
                </div>
            }
            Array array = Argument.Getter.Invoke();
            ArgumentType type = Argument.Type ^ ArgumentType.Array;
            for (int i = 0; i < array.Length; i++)
            {
                int index = i;
                <ArgumentEditEntry ViewModel="ViewModel" Name="@($"{i + 1}:")" ComponentName="@($"Arg_{Argument.Name}_{i}")" ValueType="type" Getter="() => array.GetValue(index)" Setter="x => array.SetValue(x, index)" />
            }
        }
        else if (Argument.Type.HasFlag(ArgumentType.List))
        {
            if (!string.IsNullOrEmpty(Argument.Name))
            {
                <div>
                    <RadzenLabel Text="@(Argument.Name)" />
                </div>
            }
            IList list = Argument.Getter.Invoke();
            <ArgumentListEdit Source="list" Argument="Argument" ViewModel="ViewModel" />
        }
        else
        {
            <ArgumentEditEntry ViewModel="ViewModel" Name="@(Argument.Name)" ComponentName="@($"Arg_{Argument.Name}")" ValueType="Argument.Type" Getter="Argument.Getter" Setter="Argument.Setter" />
        }
    }
</div>



@code {
    [Parameter]
    public required ArgumentInfo Argument { get; set; }
}

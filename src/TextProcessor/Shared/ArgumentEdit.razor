@using TextProcessor.Logics.Operations;
@using TextProcessor.Logics.Operations.Conditions;

@inject ArgumentEditViewModel ViewModel

<div>
    @{
        string componentName = $"Arg_{Argument.Name}";
        <RadzenLabel Component="@(componentName)" Text="@(Argument.Name)" />
        switch (Argument.Type)
        {
            case ArgumentType.String:
                <RadzenTextBox Name="@(componentName)" Value="@(Argument.Value)" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.StringMultiLine:
                <RadzenTextArea Name="@(componentName)" Value="@(Argument.Value)" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.Integer:
                <RadzenNumeric TValue="int" Name="@(componentName)" Value="Argument.Value" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.Integer64:
                <RadzenNumeric TValue="long" Name="@(componentName)" Value="Argument.Value" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.Decimal:
                <RadzenNumeric TValue="double" Name="@(componentName)" Value="Argument.Value" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.Index:
                <RadzenNumeric TValue="int" Name="@(componentName)" Value="@(Argument.Value + 1)" Min="1" ValueChanged="x => Argument.Setter.Invoke(x - 1)" />
                break;
            case ArgumentType.Boolean:
                <RadzenCheckBox TValue="bool" Name="@(componentName)" Value="@(Argument.Value)" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.ValueCondition:
                <ConditionEdit TValue="ValueCondition" Name="@(componentName)" Value="@(Argument.Value)" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.RowCondition:
                <ConditionEdit TValue="RowCondition" Name="@(componentName)" Value="@(Argument.Value)" ValueChanged="x => Argument.Setter.Invoke(x)" />
                break;
            case ArgumentType.Arguments:
                <RadzenPanel Name="@(componentName)">
                    <RadzenStack>
                        @foreach (ArgumentInfo arg in ((IHasArguments)Argument.Value).Arguments)
                        {
                            <ArgumentEdit Argument="arg" />
                        }
                    </RadzenStack>
                </RadzenPanel>
                break;
            case ArgumentType.TextData:
                <RadzenDropDown TValue="DsvFileInfo" Name="@(componentName)" Data="ViewModel.Files" Value="@(ViewModel.Files.FirstOrDefault(x => x.Data == Argument.Value))" ValueChanged="x => Argument.Setter.Invoke(x.Data)" TextProperty="Name" />
                break;
            default:
                break;
        }
    }
</div>

@code {
    [Parameter]
    public required ArgumentInfo Argument { get; set; }
}
